(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{721:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("AddonLogo"),t._v(" "),a("p",[t._v("This is an add-on that exposes your openHAB system as a bridge over the HomeKit protocol.")]),t._v(" "),a("p",[t._v('Using this add-on, you will be able to control your openHAB system using Apple\'s Siri, or any of a number of HomeKit enabled iOS apps.\nIn order to do so, you will need to make some configuration changes.\nHomeKit organizes your home into "accessories" that are made up of a number of "characteristics".\nSome accessory types require a specific set of characteristics.')]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v('Your first step will be to create the homekit.cfg in your conf/services folder.\nAt the very least, you will need to define a pin number for the bridge.\nThis will be used in iOS when pairing. The pin code is in the form "###-##-###".\nRequirements beyond this are not clear, and Apple enforces limitations on eligible pins within iOS.\nAt the very least, you cannot use repeating (111-11-111) or sequential (123-45-678) pin codes.\nIf your home network is secure, a good starting point is the pin code used in most sample applications: 031-45-154.')]),t._v(" "),a("p",[t._v("Other settings, such as using Fahrenheit temperatures, customizing the thermostat heat/cool/auto modes, and specifying the interface to advertise the Homekit bridge (which can be edited in PaperUI standard mode) are also illustrated in the following sample:")]),t._v(" "),t._m(2),a("p",[t._v("The following additional settings can be added or edited in PaperUI after switching to expert mode:")]),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("After setting this global configuration, you will need to tag your openHAB items in order to map them to an ontology.\nFor our purposes, you may consider HomeKit accessories to be of two forms: simple and complex.")]),t._v(" "),a("p",[t._v("A simple accessory will be mapped to a single openHAB item (i.e. a Lighbulb is mapped to a Switch, Dimmer, or Color item).\nA complex accessory will be made up of multiple openHAB items (i.e. a Thermostat is composed of Heating and Cooling thresholds, a mode, and current temperature).\nComplex accessories require a tag on a Group indicating the accessory type, as well as tags on the items it composes.")]),t._v(" "),a("p",[t._v("A full list of supported accessory types can be found in the table below.")]),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("See the sample below for example items:")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("HomeKit requires a unique identifier for each accessory advertised by the bridge.\nThis unique identifier is hashed from the Item's name.\nFor that reason, it is important that the name of your Items exposed to HomeKit remain consistent.")]),t._v(" "),a("p",[t._v("If you encounter any issues with the add-on and need support, it may be important to get detailed logs of your device's communication with openHAB.\nIn order to get logs from the underlying library used to implement the HomeKit protocol, enable trace logging using the following command:")]),t._v(" "),t._m(11),t._v(" "),a("DocPreviousVersions"),t._v(" "),a("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"homekit-add-on"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#homekit-add-on","aria-hidden":"true"}},[this._v("#")]),this._v(" HomeKit Add-on")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"global-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#global-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Global Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("org.openhab.homekit:port=9124\norg.openhab.homekit:pin=031-45-154\norg.openhab.homekit:useFahrenheitTemperature=true\norg.openhab.homekit:thermostatCoolMode=CoolOn\norg.openhab.homekit:thermostatHeatMode=HeatOn\norg.openhab.homekit:thermostatAutoMode=Auto\norg.openhab.homekit:thermostatOffMode=Off\norg.openhab.homekit:networkInterface=192.168.0.6\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("org.openhab.homekit:name=openHAB\norg.openhab.homekit:minimumTemperature=-100\norg.openhab.homekit:maximumTemperature=100\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"overview-of-all-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview-of-all-settings","aria-hidden":"true"}},[this._v("#")]),this._v(" Overview of all settings")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("Setting")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Default value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("networkInterface")]),t._v(" "),a("td",[t._v("IP address or domain name under which the HomeKit bridge can be reached. If no value is configured, the addon tries to determine the IP address from the local hostname.")]),t._v(" "),a("td",[t._v("(none)")])]),t._v(" "),a("tr",[a("td",[t._v("port")]),t._v(" "),a("td",[t._v("Port under which the HomeKit bridge can be reached.")]),t._v(" "),a("td",[t._v("9123")])]),t._v(" "),a("tr",[a("td",[t._v("pin")]),t._v(" "),a("td",[t._v("Pin code used for pairing with iOS devices. Apparently, pin codes are provided by Apple and represent specific device types, so they cannot be chosen freely. The pin code 031-45-154 is used in sample applications and known to work.")]),t._v(" "),a("td",[t._v("031-45-154")])]),t._v(" "),a("tr",[a("td",[t._v("useFahrenheitTemperature")]),t._v(" "),a("td",[t._v("Set to true to use Fahrenheit degrees, or false to use Celsius degrees.")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("thermostatCoolMode")]),t._v(" "),a("td",[t._v("Word used for activating the cooling mode of the device (if applicable).")]),t._v(" "),a("td",[t._v("CoolOn")])]),t._v(" "),a("tr",[a("td",[t._v("thermostatHeatMode")]),t._v(" "),a("td",[t._v("Word used for activating the heating mode of the device (if applicable).")]),t._v(" "),a("td",[t._v("HeatOn")])]),t._v(" "),a("tr",[a("td",[t._v("thermostatAutoMode")]),t._v(" "),a("td",[t._v("Word used for activating the automatic mode of the device (if applicable).")]),t._v(" "),a("td",[t._v("Auto")])]),t._v(" "),a("tr",[a("td",[t._v("thermostatOffMode")]),t._v(" "),a("td",[t._v("Word used to set the thermostat mode of the device to off (if applicable).")]),t._v(" "),a("td",[t._v("Off")])]),t._v(" "),a("tr",[a("td",[t._v("minimumTemperature")]),t._v(" "),a("td",[t._v("Lower bound of possible temperatures, used in the user interface of the iOS device to display the allowed temperature range. Note that this setting applies to all devices in HomeKit.")]),t._v(" "),a("td",[t._v("-100")])]),t._v(" "),a("tr",[a("td",[t._v("maximumTemperature")]),t._v(" "),a("td",[t._v("Upper bound of possible temperatures, used in the user interface of the iOS device to display the allowed temperature range. Note that this setting applies to all devices in HomeKit.")]),t._v(" "),a("td",[t._v("100")])]),t._v(" "),a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("Name under which this HomeKit bridge is announced on the network. This is also the name displayed on the iOS device when searching for available bridges.")]),t._v(" "),a("td",[t._v("openHAB")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"item-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Item Configuration")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("Tag")]),t._v(" "),a("th",[t._v("Child tag")]),t._v(" "),a("th",[t._v("Supported items")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Lighting")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Switch, Dimmer, Color")]),t._v(" "),a("td",[t._v("A lightbulb, switchable, dimmable or rgb")])]),t._v(" "),a("tr",[a("td",[t._v("Switchable")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Switch, Dimmer, Color")]),t._v(" "),a("td",[t._v("An accessory that can be turned off and on. While similar to a lightbulb, this will be presented differently in the Siri grammar and iOS apps")])]),t._v(" "),a("tr",[a("td",[t._v("CurrentTemperature")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("An accessory that provides a single read-only temperature value. The units default to celsius but can be overridden globally using the useFahrenheitTemperature global property")])]),t._v(" "),a("tr",[a("td",[t._v("CurrentHumidity")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("An accessory that provides a single read-only value indicating the relative humidity.")])]),t._v(" "),a("tr",[a("td",[t._v("Thermostat")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Group")]),t._v(" "),a("td",[t._v("A thermostat requires all child tags defined below")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("CurrentTemperature")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("The current temperature, same as above")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("homekit:HeatingCoolingMode")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v('Indicates the current mode of the device: OFF, AUTO, HEAT, COOL. The string\'s value must match those defined in the thermostat*Mode properties. This is a homekit-specific term and therefore the tags needs to be prefixed with "homekit:"')])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("TargetTemperature")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("A target temperature that will engage the thermostat's heating and cooling actions as necessary, depending on the heatingCoolingMode")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dsl"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("KitchenLights")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Kitchen Lights"')]),a("span",{attrs:{class:"token function"}},[t._v(" <light>")]),a("span",{attrs:{class:"token tag"}},[t._v(" (gKitchen)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Lighting"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("BedroomLights")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Bedroom Lights"')]),a("span",{attrs:{class:"token function"}},[t._v(" <light>")]),a("span",{attrs:{class:"token tag"}},[t._v(" (gBedroom)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Lighting"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("BedroomTemperature")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Bedroom Temperature"')]),a("span",{attrs:{class:"token tag"}},[t._v(" (gBedroom)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"CurrentTemperature"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("Group")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("gDownstairsThermostat")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Downstairs Thermostat"')]),a("span",{attrs:{class:"token tag"}},[t._v(" (gFF)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Thermostat"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("DownstairsThermostatCurrentTemp")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Downstairs Thermostat Current Temperature"')]),a("span",{attrs:{class:"token tag"}},[t._v(" (gDownstairsThermostat)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"CurrentTemperature"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("DownstairsThermostatTargetTemperature")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Downstairs Thermostat Target Temperature"')]),a("span",{attrs:{class:"token tag"}},[t._v(" (gDownstairsThermostat)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"TargetTemperature"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("DownstairsThermostatHeatingCoolingMode")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Downstairs Thermostat Heating/Cooling Mode"')]),a("span",{attrs:{class:"token tag"}},[t._v(" (gDownstairsThermostat)")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"homekit:HeatingCoolingMode"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"additional-notes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#additional-notes","aria-hidden":"true"}},[this._v("#")]),this._v(" Additional Notes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HomeKit allows only a single pairing to be established with the bridge.\nThis pairing is normally shared across devices via iCloud.\nIf you need to establish a new pairing, you'll need to clear the existing pairings.\nTo do this, you can issue the command "),e("code",[this._v("smarthome:homekit clearPairings")]),this._v(" from the OSGi console.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("openhab> log:set TRACE com.beowulfe.hap")])])}],!1,null,null,null);n.options.__file="readme.md";e.default=n.exports}}]);