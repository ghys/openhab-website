(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{796:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("AddonLogo"),t._v(" "),e("p",[t._v("This is an openHAB binding for Tellstick devices produced by Telldus, a Swedish company based in Lund.")]),t._v(" "),e("p",[t._v('The original Tellstick focused on controlling 433 MHz devices like switches, dimmers and reading sensors from different brands.\nMany of the supported devices are cheaper and "low-end" and support have been made by reverse engineer the transmission protocols.\nAll of these 433 MHz devices is one-way, so some versions of the Tellstick monitoring the air to keep the state of all devices.')]),t._v(" "),e("p",[t._v("The latest versions have also implemented Z-Wave as transmission protocol which open up for more robust transmission due two-ways communication.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("This binding supports the following thing types:")]),t._v(" "),t._m(3),t._v(" "),e("p",[t._v("Additionally the binding have two types of bridge things which correspond to available API types:")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),e("p",[t._v("Only the bridges require manual configuration.\nThe devices and sensors should not be added by hand, let the discovery/inbox initially configure these.")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),e("p",[t._v("Depending on your Tellstick model different API methods is available:")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),e("p",[t._v("Optional:")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),e("p",[t._v("To configure Telldus Live you have request OAuth tokens from Telldus. Goto this page\n"),e("a",{attrs:{href:"http://api.telldus.com/keys/index",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://api.telldus.com/keys/index"),e("OutboundLink")],1),t._v(" and request your keys and update the config.")]),t._v(" "),t._m(24),e("p",[t._v("Required:")]),t._v(" "),t._m(25),t._v(" "),e("p",[t._v("Optional:")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),e("p",[t._v("Actuators ([dimmer]/[switch]) support the following channels:")]),t._v(" "),t._m(28),t._v(" "),e("p",[t._v("Sensors ([sensor]) support the following channels:")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),e("p",[t._v("First create another proxy item for every sensor:")]),t._v(" "),t._m(32),e("p",[t._v("Then create a rule which updates the proxy item:")]),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),e("DocPreviousVersions"),t._v(" "),e("EditPageLink")],1)},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"tellstick-binding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-binding","aria-hidden":"true"}},[this._v("#")]),this._v(" Tellstick Binding")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",{attrs:{align:"center"}},[s("img",{attrs:{src:"doc/tellstick_duo.jpg",alt:"Tellstick Duo with device",width:"300px"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"supported-things"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#supported-things","aria-hidden":"true"}},[this._v("#")]),this._v(" Supported Things")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("em",[t._v("Dimmable Device")]),t._v(" - Usually for controlling lamps.  "),e("code",[t._v("dimmer")])]),t._v(" "),e("li",[e("em",[t._v("Switchable Device")]),t._v(" - On/Off only could be lamps or other electronic equipment. "),e("code",[t._v("switch")])]),t._v(" "),e("li",[e("em",[t._v("Sensors")]),t._v(" - Temperature- and humidity-sensors. "),e("code",[t._v("sensor")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("em",[this._v("Telldus Core Bridge")]),this._v(" - Oldest API, used by USB devices. "),s("code",[this._v("telldus-core")])]),this._v(" "),s("li",[s("em",[this._v("Telldus Live Bridge")]),this._v(" - Telldus Cloud service, all devices with online access. "),s("code",[this._v("telldus-live")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("The attentive reader discovers that there is many missing sensor types; "),e("code",[t._v("UV")]),t._v(", "),e("code",[t._v("Luminance")]),t._v(", "),e("code",[t._v("Dew point")]),t._v(", "),e("code",[t._v("Barometic pressure")]),t._v(" "),e("code",[t._v("Rainrate")]),t._v(", "),e("code",[t._v("Raintotal")]),t._v(", "),e("code",[t._v("Winddirection")]),t._v(", "),e("code",[t._v("Windaverage")]),t._v(" and "),e("code",[t._v("Windgust")]),t._v(" which is supported by the Tellstick devices.\nSupport have not been implemented on the openhab side yet, contributions are welcome.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[s("strong",[this._v("Switchbased sensors workaround")])]),this._v(" "),s("br")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("Some 433MHz magnetic & PIR sensors for example magnetic door sensors are detected as a regular "),s("code",[this._v("switch")]),this._v(" things instead of a separate type. There is technically no way of distinguish them apart from regulur "),s("code",[this._v("switch")]),this._v(" things.\nFor using them as sensors only (not paired to a lamp) please consult the workaround in the channel section.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"discovery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#discovery","aria-hidden":"true"}},[this._v("#")]),this._v(" Discovery")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Devices which is added to "),s("em",[this._v("Telldus Core")]),this._v(" and "),s("em",[this._v("Telldus Live")]),this._v(" can be discovered by openHAB.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("When you add this binding it will try to discover the "),s("em",[this._v("Telldus Core Bridge")]),this._v(".\nIf it's installed correct its devices will show up.\nIf you want to use the "),s("em",[this._v("Telldus Live")]),this._v(" its bridge, "),s("em",[this._v("Telldus Live bridge")]),this._v(" need to be added manually.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"binding-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binding-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding Configuration")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[s("strong",[this._v("For USB connected tellsticks only, eg. Basic and DUO")])]),this._v('\nFirst of all you need to make sure that your JVM is matching your installed Telldus Center.\nThis normally means openHab must run on a 32bit JVM for windows and a 64bit JVM for linux.\nFor windows the binding is hardcoded to look for Telldus Center in Programs Files ("C:/Program Files/Telldus/;C:/Program Files (x86)/Telldus/").\nIf you have trouble getting the telldus core library to work you can modify the library path using')])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"thing-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thing-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Thing Configuration")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"dimmers-switches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dimmers-switches","aria-hidden":"true"}},[this._v("#")]),this._v(" Dimmers & switches")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("There is an option to override the resend count of the commands.\nUse the option "),s("code",[this._v("repeat")]),this._v(" for that. Default resend count is 2.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"bridges"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bridges","aria-hidden":"true"}},[this._v("#")]),this._v(" Bridges")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Depending on your tellstick device type there is different ways of using this binding.\nThe binding implements two different API:"),e("br"),t._v(" "),e("strong",[t._v("1)")]),t._v(" "),e("em",[t._v("Telldus Core")]),t._v(" which is a local only interface supported by USB based device. "),e("br"),t._v(" "),e("strong",[t._v("2)")]),t._v(" "),e("em",[t._v("Telldus Live")]),t._v(" which is a REST based cloud service maintained by Telldus. "),e("br")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("Not implemented yet but supported by some new devices: "),s("br"),this._v(" "),s("strong",[this._v("3)")]),this._v(" "),s("em",[this._v("Local Rest API")]),this._v(" is a local API which would work similar to Telldus Live but local.")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("tr",[e("td",[e("b",[t._v("Model")])]),t._v(" "),e("td",[e("b",[t._v("Telldus Core")])]),t._v(" "),e("td",[e("b",[t._v("Telldus Live")])]),t._v(" "),e("td",[t._v("Local REST API")]),t._v(" "),e("td",[e("b",[t._v("Verified working with openHAB")])])]),t._v(" "),e("tr",[e("td",[t._v("Tellstick Basic")]),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td"),e("td")]),t._v(" "),e("tr",[e("td",[t._v("Tellstick Duo")]),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td"),e("td",[t._v("X")])]),t._v(" "),e("tr",[e("td",[t._v("Tellstick Net v.1")]),e("td"),e("td",[t._v("X")]),e("td"),e("td")]),t._v(" "),e("tr",[e("td",[t._v("Tellstick Net v.2")]),e("td"),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td")]),t._v(" "),e("tr",[e("td",[t._v("Tellstick ZNet Lite v.1")]),e("td"),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td",[t._v("X")])]),t._v(" "),e("tr",[e("td",[t._v("Tellstick ZNet Lite v.2")]),e("td"),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td")]),t._v(" "),e("tr",[e("td",[e("i",[t._v("Tellstick ZNet Pro (Not released)")])]),e("td"),e("td",[t._v("X")]),e("td",[t._v("X")]),e("td")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"telldus-core-bridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#telldus-core-bridge","aria-hidden":"true"}},[this._v("#")]),this._v(" Telldus Core Bridge")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dsl"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("tellstick"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),e("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("core"),e("span",{attrs:{class:"token operator"}},[t._v(":")]),e("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Tellstick Duo"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("resendInterval"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token number"}},[t._v("200")]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("libraryPath:")]),this._v(" The path to tellduscore.dll/so,")]),this._v(" "),s("li",[s("strong",[this._v("resendInterval:")]),this._v(" The interval between each transmission of command in ms, default 100ms.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"telldus-live-bridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#telldus-live-bridge","aria-hidden":"true"}},[this._v("#")]),this._v(" Telldus Live Bridge")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dsl"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("tellstick"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),e("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("live"),e("span",{attrs:{class:"token operator"}},[t._v(":")]),e("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Tellstick ZWave"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("publicKey"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"XXX"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"YYYY"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" token"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"ZZZZ"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokenSecret"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"UUUU"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("strong",[t._v("privateKey:")]),t._v(" Private key")]),t._v(" "),e("li",[e("strong",[t._v("publicKey:")]),t._v(" Public key")]),t._v(" "),e("li",[e("strong",[t._v("token:")]),t._v(" Token")]),t._v(" "),e("li",[e("strong",[t._v("tokenSecret:")]),t._v(" Token secret")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("refreshInterval:")]),this._v(" How often we should contact "),s("em",[this._v("Telldus Live")]),this._v(" to check for updates (in ms)")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channels","aria-hidden":"true"}},[this._v("#")]),this._v(" Channels")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("tr",[e("td",[e("b",[t._v("Channel Type ID")])]),t._v(" "),e("td",[e("b",[t._v("Item Type")])]),t._v(" "),e("td",[e("b",[t._v("Description")])])]),t._v(" "),e("tr",[e("td",[t._v("dimmer")]),e("td",[t._v("Number")]),e("td",[t._v("This channel indicates the current dim level")])]),t._v(" "),e("tr",[e("td",[t._v("state")]),e("td",[t._v("Switch")]),e("td",[t._v("This channel indicates whether a device is turned on or off.")])]),t._v(" "),e("tr",[e("td",[t._v("timestamp")]),e("td",[t._v("DateTime")]),e("td",[t._v("This channel reports the last time this device state changed.")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("tr",[e("td",[e("b",[t._v("Channel Type ID")])]),t._v(" "),e("td",[e("b",[t._v("Item Type")])]),t._v(" "),e("td",[e("b",[t._v("Description")])])]),t._v(" "),e("tr",[e("td",[t._v("humidity")]),e("td",[t._v("Number")]),e("td",[t._v("This channel reports the current humidity in percentage.")])]),t._v(" "),e("tr",[e("td",[t._v("temperature")]),e("td",[t._v("Number")]),e("td",[t._v("This channel reports the current temperature in celsius.")])]),t._v(" "),e("tr",[e("td",[t._v("timestamp")]),e("td",[t._v("DateTime")]),e("td",[t._v(" This channel reports the last time this sensor was updates.")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"switchbased-sensor-workaround"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switchbased-sensor-workaround","aria-hidden":"true"}},[this._v("#")]),this._v(" Switchbased sensor workaround")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("All switchbased sensors are binary and the goal is to represent them as a "),s("code",[this._v("contact")]),this._v(" item in openhab. Eg. a door is open or closed and can't be altered by sending a radio signal.\nTo achive that we will create a proxy item which is updated by a rule.")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dsl"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("front_door_sensor")]),t._v("\t"),e("span",{attrs:{class:"token string"}},[t._v('"Front door"')]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v(" <door>")]),t._v("  "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"tellstick:switch:1:7:state"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("Contact")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("front_door_proxy")]),t._v("\t"),e("span",{attrs:{class:"token string"}},[t._v('"Front door"')]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v(" <door>")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rules"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("rule")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"proxy_front_door_on"')]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n\t"),e("span",{attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" front_door_sensor "),e("span",{attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\t"),e("span",{attrs:{class:"token function"}},[t._v("postUpdate")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("front_door_proxy"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("OPEN")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n"),e("span",{attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("rule")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"proxy_front_door_off"')]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n\t"),e("span",{attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" front_door_sensor "),e("span",{attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("OFF")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\t"),e("span",{attrs:{class:"token function"}},[t._v("postUpdate")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("front_door_proxy"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("CLOSED")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n"),e("span",{attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"full-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Full Example")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"tellstick-things"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-things","aria-hidden":"true"}},[this._v("#")]),this._v(" tellstick.things")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dsl"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("tellstick"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),e("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("core"),e("span",{attrs:{class:"token operator"}},[t._v(":")]),e("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Tellstick Duo"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("resendInterval"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token number"}},[t._v("200")]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("tellstick"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),e("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("live"),e("span",{attrs:{class:"token operator"}},[t._v(":")]),e("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Tellstick ZWave"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("refreshInterval"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token number"}},[t._v("10000")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" publicKey"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"XXXXXXXX"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"YYYYYY"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" token"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"ZZZZZZZZ"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokenSecret"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"UUUUUUUUUU"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Devices are preferable discovered automatically.\nAdd them either with karaf: "),s("code",[this._v("inbox approve <thingId>")]),this._v(" or in paperUI. The bridges can also be added with PaperUI.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"tellstick-items"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-items","aria-hidden":"true"}},[this._v("#")]),this._v(" tellstick.items")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("List available devices in karaf with "),s("code",[this._v("things")]),this._v(" or get the channels in paperUI.")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dsl"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("Slider")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("living_room_ceiling")]),t._v("  "),e("span",{attrs:{class:"token string"}},[t._v('"Living room ceiling"')]),t._v("             "),e("span",{attrs:{class:"token function"}},[t._v(" <light>")]),t._v("                 "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"tellstick:dimmer:1:3:state"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("living_room_table")]),t._v("    "),e("span",{attrs:{class:"token string"}},[t._v('"Living room table"')]),t._v("               "),e("span",{attrs:{class:"token function"}},[t._v(" <light>")]),t._v("                 "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"tellstick:switch:1:3:state"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("inside_temperature")]),t._v("   "),e("span",{attrs:{class:"token string"}},[t._v('"Inside temperature [%.1f °C]"')]),t._v("    "),e("span",{attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v("           "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"tellstick:sensor:1:47_temperaturehumidity_fineoffset:temperature"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("inside_humidity")]),t._v("      "),e("span",{attrs:{class:"token string"}},[t._v('"Inside humidity [%.1f RH]"')]),t._v("       "),e("span",{attrs:{class:"token function"}},[t._v(" <humidity>")]),t._v("              "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"tellstick:sensor:1:47_temperaturehumidity_fineoffset:humidity"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);n.options.__file="readme.md";s.default=n.exports}}]);